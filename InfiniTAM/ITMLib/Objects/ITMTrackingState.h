// Copyright 2014 Isis Innovation Limited and the authors of InfiniTAM

#pragma once

#include "../Utils/ITMLibDefines.h"

#include "ITMPose.h"
#include "ITMImage.h"
#include "ITMPointCloud.h"

namespace ITMLib
{
	namespace Objects
	{
		/** \brief
		    Stores some internal variables about the current tracking
		    state, most importantly the camera pose
		*/
		class ITMTrackingState
		{
		public:
			/** @brief
			    Gives the raycasting operations an idea of the
			    depth range to cover

			    Each pixel contains an expected minimum and maximum
			    depth. The raycasting step would use this
			    information to reduce the range for searching an
			    intersection with the actual surface. Should be
			    updated by a ITMLib::Engine::ITMVisualisationEngine
			    before any raycasting operation.
			*/
			ITMImage<Vector2f> *renderingRangeImage;
			/** @brief
			    Visual rendering output of the scene.

			    This is typically created as a by-product of
			    raycasting operations.
			*/
			ITMUChar4Image *rendering;
			/** @brief
			    Excerpt of the scene used by the tracker to align
			    a new frame.

			    This is usually the main result generated by the
			    raycasting operation in a ITMLib::Engine::ITMSceneReconstructionEngine.
			*/
			ITMPointCloud *pointCloud;

			/// Current pose of the depth camera.
			ITMPose *pose_d;

			ITMTrackingState(Vector2i imgSize, bool useGPU)
			{
				this->rendering = new ITMUChar4Image(imgSize, useGPU);
				this->renderingRangeImage = new ITMImage<Vector2f>(imgSize, useGPU);
				this->pointCloud = new ITMPointCloud(imgSize, useGPU);

				this->pose_d = new ITMPose();
			}

			~ITMTrackingState(void)
			{
				delete pointCloud;
				delete renderingRangeImage;
				delete rendering;
				delete pose_d;
			}

			// Suppress the default copy constructor and assignment operator
			ITMTrackingState(const ITMTrackingState&);
			ITMTrackingState& operator=(const ITMTrackingState&);
		};
	}
}
